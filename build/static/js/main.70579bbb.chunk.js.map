{"version":3,"sources":["api/client.js","features/filters/filtersSlice.js","features/todos/todosSlice.js","features/header/Header.js","features/todos/times-solid.svg","features/filters/colors.js","features/todos/TodoListItem.js","features/todos/TodoList.js","features/footer/Footer.js","App.js","api/server.js","store.js","index.js"],"names":["async","client","endpoint","body","customConfig","arguments","length","undefined","headers","config","method","data","JSON","stringify","response","window","fetch","json","ok","Error","statusText","err","Promise","reject","message","get","post","StatusFilters","All","Active","Completed","initialState","status","colors","filtersSlice","createSlice","name","reducers","statusFilterChanged","state","action","payload","colorFilterChanged","reducer","color","changeType","includes","push","filter","existingColor","prepare","actions","todosAdapter","createEntityAdapter","getInitialState","fetchTodos","createAsyncThunk","todos","saveNewTodo","initialTodo","text","todo","todosSlice","todoToggled","todoId","entities","completed","todoColorSelected","todoDeleted","removeOne","allTodosCompleted","Object","values","forEach","completedTodosCleared","completedIds","map","id","removeMany","extraReducers","builder","addCase","pending","fulfilled","setAll","addOne","todoAdded","selectAll","selectTodos","selectById","selectTodoById","getSelectors","selectFilteredTodos","createSelector","filters","showAllCompletions","completedStatus","statusMatches","colorMatches","selectFilteredTodoIds","filteredTodos","Header","_path","setText","useState","setStatus","dispatch","useDispatch","isLoading","placeholder","loader","React","createElement","className","value","onChange","e","target","onKeyDown","trimmedText","trim","which","disabled","_extends","assign","bind","n","t","r","hasOwnProperty","call","apply","SvgTimesSolid","_ref","svgRef","title","props","focusable","role","viewBox","ref","fill","d","ForwardRef","forwardRef","availableColors","capitalize","s","toUpperCase","slice","TodoListItem","useSelector","colorOptions","c","key","type","checked","handleCompletedChanged","style","onClick","onDelete","TimesSolid","TodoList","todoIds","renderedListItems","RemainingTodos","count","suffix","StatusFilter","_ref2","renderedFilters","keys","handleClick","ColorFilters","_ref3","renderedColors","handleChange","backgroundColor","Footer","todosRemaining","onMarkCompletedClicked","onClearCompletedClicked","onColorChange","App","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomFromArray","array","min","max","Math","ceil","floor","todoTemplates","base","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","models","Model","list","hasMany","factories","Factory","i","Number","generateTodoText","template","replace","serializers","serialize","object","request","numerifyId","prototype","seeds","createList","store","configureStore","todosReducer","filtersReducer","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.70579bbb.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let { color, changeType } = action.payload\n        const { colors } = state\n        switch (changeType) {\n          case 'added': {\n            if (!colors.includes(color)) {\n              colors.push(color)\n            }\n            break\n          }\n          case 'removed': {\n            state.colors = colors.filter(\n              (existingColor) => existingColor !== color\n            )\n          }\n          default:\n            return\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: { color, changeType },\n        }\n      },\n    },\n  },\n})\n\nexport const { colorFilterChanged, statusFilterChanged } = filtersSlice.actions\n\nexport default filtersSlice.reducer\n","import {\n  createSlice,\n  createSelector,\n  createAsyncThunk,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nconst todosAdapter = createEntityAdapter()\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle',\n})\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nexport const saveNewTodo = createAsyncThunk(\n  'todos/saveNewTodo',\n  async (text) => {\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    return response.todo\n  }\n)\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color },\n        }\n      },\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach((todo) => {\n        todo.completed = true\n      })\n    },\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities)\n        .filter((todo) => todo.completed)\n        .map((todo) => todo.id)\n      todosAdapter.removeMany(state, completedIds)\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        todosAdapter.setAll(state, action.payload)\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  },\n})\n\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n} = todosSlice.actions\n\nexport default todosSlice.reducer\n\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById,\n} = todosAdapter.getSelectors((state) => state.todos)\n\nexport const selectTodoIds = createSelector(\n  // First, pass one or more \"input selector\" functions:\n  selectTodos,\n  // Then, an \"output selector\" that receives all the input results as arguments\n  // and returns a final result value\n  (todos) => todos.map((todo) => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  selectTodos,\n  // Second input selector: all filter values\n  (state) => state.filters,\n  // Output selector: receives both values\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter((todo) => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n  // Pass our other memoized selector as an input\n  selectFilteredTodos,\n  // And derive data in the output selector\n  (filteredTodos) => filteredTodos.map((todo) => todo.id)\n)\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { saveNewTodo } from '../todos/todosSlice'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  const [status, setStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const handleChange = (e) => setText(e.target.value)\n\n  const handleKeyDown = async (e) => {\n    // If the user pressed the Enter key:\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n      // Create and dispatch the thunk function itself\n      setStatus('loading')\n      await dispatch(saveNewTodo(trimmedText))\n      // And clear out the text input\n      setText('')\n      setStatus('idle')\n    }\n  }\n\n  let isLoading = status === 'loading'\n  let placeholder = isLoading ? '' : 'What needs to be done?'\n  let loader = isLoading ? <div className=\"loader\" /> : null\n\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isLoading}\n      />\n      {loader}\n    </header>\n  )\n}\n\nexport default Header\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport React from \"react\";\nconst SvgTimesSolid = _ref => {\n  let {\n    svgRef,\n    title,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"times\",\n    className: \"svg-inline--fa fa-times fa-w-11\",\n    role: \"img\",\n    viewBox: \"0 0 352 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\n  })));\n};\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgTimesSolid, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/times-solid.a552303d.svg\";\nexport { ForwardRef as ReactComponent };","export const availableColors = ['green', 'blue', 'orange', 'purple', 'red']\n\nexport const capitalize = (s) => s[0].toUpperCase() + s.slice(1)\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { ReactComponent as TimesSolid } from './times-solid.svg'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport {\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n  selectTodoById,\n} from './todosSlice'\n\n// Destructure `props.id`, since we just need the ID value\nconst TodoListItem = ({ id }) => {\n  // Call our `selectTodoById` with the state _and_ the ID value\n  const todo = useSelector((state) => selectTodoById(state, id))\n  const { text, completed, color } = todo\n\n  const dispatch = useDispatch()\n\n  const handleCompletedChanged = () => {\n    dispatch(todoToggled(todo.id))\n  }\n\n  const handleColorChanged = (e) => {\n    const color = e.target.value\n    dispatch(todoColorSelected(todo.id, color))\n  }\n\n  const onDelete = () => {\n    dispatch(todoDeleted(todo.id))\n  }\n\n  const colorOptions = availableColors.map((c) => (\n    <option key={c} value={c}>\n      {capitalize(c)}\n    </option>\n  ))\n\n  return (\n    <li>\n      <div className=\"view\">\n        <div className=\"segment label\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={completed}\n            onChange={handleCompletedChanged}\n          />\n          <div className=\"todo-text\">{text}</div>\n        </div>\n        <div className=\"segment buttons\">\n          <select\n            className=\"colorPicker\"\n            value={color}\n            style={{ color }}\n            onChange={handleColorChanged}\n          >\n            <option value=\"\"></option>\n            {colorOptions}\n          </select>\n          <button className=\"destroy\" onClick={onDelete}>\n            <TimesSolid />\n          </button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default TodoListItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport TodoListItem from './TodoListItem'\n\nimport { selectFilteredTodoIds } from './todosSlice'\n\nconst TodoList = () => {\n  const todoIds = useSelector(selectFilteredTodoIds)\n  const loadingStatus = useSelector((state) => state.todos.status)\n\n  if (loadingStatus === 'loading') {\n    return (\n      <div className=\"todo-list\">\n        <div className=\"loader\" />\n      </div>\n    )\n  }\n\n  const renderedListItems = todoIds.map((todoId) => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n\nexport default TodoList\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport {\n  StatusFilters,\n  colorFilterChanged,\n  statusFilterChanged,\n} from '../filters/filtersSlice'\nimport {\n  completedTodosCleared,\n  allTodosCompleted,\n  selectTodos,\n} from '../todos/todosSlice'\n\nconst RemainingTodos = ({ count }) => {\n  const suffix = count === 1 ? '' : 's'\n\n  return (\n    <div className=\"todo-count\">\n      <h5>Remaining Todos</h5>\n      <strong>{count}</strong> item{suffix} left\n    </div>\n  )\n}\n\nconst StatusFilter = ({ value: status, onChange }) => {\n  const renderedFilters = Object.keys(StatusFilters).map((key) => {\n    const value = StatusFilters[key]\n    const handleClick = () => onChange(value)\n    const className = value === status ? 'selected' : ''\n\n    return (\n      <li key={value}>\n        <button className={className} onClick={handleClick}>\n          {key}\n        </button>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"filters statusFilters\">\n      <h5>Filter by Status</h5>\n      <ul>{renderedFilters}</ul>\n    </div>\n  )\n}\n\nconst ColorFilters = ({ value: colors, onChange }) => {\n  const renderedColors = availableColors.map((color) => {\n    const checked = colors.includes(color)\n    const handleChange = () => {\n      const changeType = checked ? 'removed' : 'added'\n      onChange(color, changeType)\n    }\n\n    return (\n      <label key={color}>\n        <input\n          type=\"checkbox\"\n          name={color}\n          checked={checked}\n          onChange={handleChange}\n        />\n        <span\n          className=\"color-block\"\n          style={{\n            backgroundColor: color,\n          }}\n        ></span>\n        {capitalize(color)}\n      </label>\n    )\n  })\n\n  return (\n    <div className=\"filters colorFilters\">\n      <h5>Filter by Color</h5>\n      <form className=\"colorSelection\">{renderedColors}</form>\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const dispatch = useDispatch()\n\n  const todosRemaining = useSelector((state) => {\n    const uncompletedTodos = selectTodos(state).filter(\n      (todo) => !todo.completed\n    )\n    return uncompletedTodos.length\n  })\n\n  const { status, colors } = useSelector((state) => state.filters)\n\n  const onMarkCompletedClicked = () => dispatch(allTodosCompleted())\n  const onClearCompletedClicked = () => dispatch(completedTodosCleared())\n\n  const onColorChange = (color, changeType) =>\n    dispatch(colorFilterChanged(color, changeType))\n\n  const onStatusChange = (status) => dispatch(statusFilterChanged(status))\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"actions\">\n        <h5>Actions</h5>\n        <button className=\"button\" onClick={onMarkCompletedClicked}>\n          Mark All Completed\n        </button>\n        <button className=\"button\" onClick={onClearCompletedClicked}>\n          Clear Completed\n        </button>\n      </div>\n\n      <RemainingTodos count={todosRemaining} />\n      <StatusFilter value={status} onChange={onStatusChange} />\n      <ColorFilters value={colors} onChange={onColorChange} />\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nimport Header from './features/header/Header'\nimport TodoList from './features/todos/TodoList'\nimport Footer from './features/footer/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <section>\n          <h1>Redux Fundamentals Example</h1>\n        </section>\n      </nav>\n      <main>\n        <section className=\"medium-container\">\n          <h2>Todos</h2>\n          <div className=\"todoapp\">\n            <Header />\n            <TodoList />\n            <Footer />\n          </div>\n        </section>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 2000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport todosReducer from './features/todos/todosSlice'\nimport filtersReducer from './features/filters/filtersSlice'\n\nconst store = configureStore({\n  reducer: {\n    // Define a top-level state field named `todos`, handled by `todosReducer`\n    todos: todosReducer,\n    filters: filtersReducer,\n  },\n})\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\n\nimport './api/server'\n\nimport store from './store'\nimport { fetchTodos } from './features/todos/todosSlice'\n\nstore.dispatch(fetchTodos())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}